// Generated by CoffeeScript 1.3.3
(function() {
  var Folder, FolderView, Item, Node,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  Node = (function(_super) {

    __extends(Node, _super);

    function Node(parent, nodeData) {
      var _this = this;
      Node.__super__.constructor.call(this, parent, nodeData);
      if (parent) {
        this.parent = parent;
      }
      this.name = nodeData.name;
      this.id = nodeData.id;
      this.isSelected = false;
      this.on('selected', function() {
        console.log('selected', self);
        _this.isSelected = true;
        return $(_this.element).addClass('selected');
      });
      this.on('deselected', function() {
        console.log('deselected', _this);
        _this.isSelected = false;
        return $(_this.element).removeClass('selected');
      });
      this.on('focus', function() {
        var child, _i, _len, _ref;
        console.log('focus', _this);
        if (_this.children) {
          _ref = _this.children;
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            child = _ref[_i];
            child.trigger('unfocus');
          }
        }
        return _this.trigger('selected');
      });
      this.on('unfocus', function() {
        var child, _i, _len, _ref;
        console.log('unfocus', _this);
        if (_this.children) {
          _ref = _this.children;
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            child = _ref[_i];
            child.trigger('unfocus');
          }
        }
        return _this.trigger('deselected');
      });
      this.on('childFocus', function(target) {
        var child, _i, _len, _ref, _results;
        console.log('childFocus', _this, target);
        _this.trigger('deselected');
        if (_this === target) {
          return;
        }
        _ref = _this.children;
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          child = _ref[_i];
          if (child === target) {
            continue;
          }
          _results.push(child.trigger('unfocus'));
        }
        return _results;
      });
    }

    return Node;

  })(window.EventDispatcher);

  Folder = (function(_super) {

    __extends(Folder, _super);

    function Folder(parent, nodeData) {
      var child, childContainer, childNodeData, children, containerTemplate, p, template, _fn, _i, _len, _ref,
        _this = this;
      Folder.__super__.constructor.call(this, parent, nodeData);
      template = "<div class='folder'></div>";
      this.element = $(template);
      containerTemplate = "<div class='folder-items'></div>";
      childContainer = $(containerTemplate);
      this.element.append(childContainer);
      children = [];
      if (nodeData.children) {
        _ref = nodeData.children;
        _fn = function(child) {
          return child.on('childFocus', function(child) {
            return _this.trigger('childFocus', child);
          });
        };
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          childNodeData = _ref[_i];
          if (childNodeData.type === 'folder') {
            child = new Folder(this, childNodeData);
          } else {
            child = new Item(this, childNodeData);
          }
          children.push(child);
          childContainer.append(child.element);
          child.on('focus', function(child) {
            return _this.trigger('childFocus', child);
          });
          _fn(child);
          child.on('unfocus', function() {
            return _this.trigger('childUnfocus');
          });
        }
      }
      this.childContainer = childContainer;
      this.type = "folder";
      this.children = children;
      this.element.prepend('<p><i class="icon-folder-open"></i> ' + this.name + '</p>');
      p = this.element.children('p');
      p.draggable({
        revert: 'invalid',
        helper: 'clone'
      }).droppable({
        accept: function(el) {
          return $(el).data('nodeLevel');
        }
      });
      p.mouseover(function(e) {
        return $(this).addClass('hover');
      });
      p.mouseout(function(e) {
        return $(this).removeClass('hover');
      });
      p.data('nodeLevel');
      $(this.element).on('click', function(e) {
        _this.trigger('focus', _this);
        return e.stopPropagation();
      });
    }

    return Folder;

  })(Node);

  Item = (function(_super) {

    __extends(Item, _super);

    function Item(parent, nodeData) {
      var element, p, template,
        _this = this;
      Item.__super__.constructor.call(this, parent, nodeData);
      template = "<div class='folder-item'></div>";
      element = $(template);
      element.append('<p class=""><i class="icon-file"></i> ' + this.name + '</p>');
      this.element = element;
      this.type = "item";
      p = this.element.children('p');
      p.draggable({
        revert: 'invalid',
        helper: 'clone'
      });
      p.mouseover(function(e) {
        return $(this).addClass('hover');
      });
      p.mouseout(function(e) {
        return $(this).removeClass('hover');
      });
      $(this.element).on('click', function(e) {
        _this.trigger('focus', _this);
        return e.stopPropagation();
      });
    }

    return Item;

  })(Node);

  FolderView = (function(_super) {

    __extends(FolderView, _super);

    function FolderView(nodeData) {
      var _this = this;
      FolderView.__super__.constructor.call(this);
      this.selectedNodes = [];
      this.root = new Folder(null, nodeData);
      this.appendTo = function(jq) {
        return $(jq).append(_this.root.element);
      };
    }

    return FolderView;

  })(window.EventDispatcher);

  window.FolderView = FolderView;

}).call(this);
