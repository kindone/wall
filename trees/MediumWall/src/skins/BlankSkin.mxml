<?xml version="1.0" encoding="utf-8"?>
<!--  -->
<s:SparkSkin name="CustomTextAreaSkin"
			 xmlns:fx="http://ns.adobe.com/mxml/2009"
			 xmlns:s="library://ns.adobe.com/flex/spark"
			 xmlns:fb="http://ns.adobe.com/flashbuilder/2009"
			 alpha.disabled="0.5"
			 blendMode="normal">
	<s:states>
		<s:State name="normal"/>
		<s:State name="disabled"/>
		<s:State name="disabledWithPrompt"/>
		<s:State name="normalWithPrompt"/>
	</s:states>
	
	<fx:Metadata>
		<![CDATA[
		[HostComponent("spark.components.TextArea")]
		]]>
	</fx:Metadata>
	
	<fx:Script fb:purpose="styling">
		<![CDATA[
			private var paddingChanged:Boolean;
			
			/* Define the skin elements that should not be colorized.
			For text area, the skin itself is colorized but the individual parts are not. */
			static private const exclusions:Array = ["background", "scroller"];
			
			override public function get colorizeExclusions():Array {
				return exclusions;
			}
			
			/* Define the content fill items that should be colored by the "contentBackgroundColor" style. */
			static private const contentFill:Array = [];
			
			override public function get contentItems():Array {
				return contentFill
			};
			
			override protected function commitProperties():void {
				super.commitProperties();
				
				if (paddingChanged) {
					updatePadding();
					paddingChanged = false;
				}
			}
			
			override protected function initializationComplete():void {
				useChromeColor = true;
				super.initializationComplete();
			}
			
			override protected function updateDisplayList(unscaledWidth:Number, unscaledHeight:Number):void {
				if (getStyle("borderVisible") == true) {
					border.visible = false;
					shadow.visible = false;
					background.left = background.top = background.right = background.bottom = 0;
					textDisplay.left = textDisplay.top = textDisplay.right = textDisplay.bottom = 0;
				} else {
					border.visible = false;
					shadow.visible = false;
					background.left = background.top = background.right = background.bottom = 0;
					textDisplay.left = textDisplay.top = textDisplay.right = textDisplay.bottom = 0;
				}
				
				borderStroke.color = getStyle("borderColor");
				borderStroke.alpha = getStyle("borderAlpha");
				
				super.updateDisplayList(unscaledWidth, unscaledHeight);
			}
			
			private function updatePadding():void {
				if (!textDisplay) {
					return;
				}
				
				// Push padding styles into the textDisplay
				var padding:Number;
				
				padding = getStyle("paddingLeft");
				if (textDisplay.getStyle("paddingLeft") != padding) {
					textDisplay.setStyle("paddingLeft", padding);
				}
				
				padding = getStyle("paddingTop");
				if (textDisplay.getStyle("paddingTop") != padding) {
					textDisplay.setStyle("paddingTop", padding);
				}
				
				padding = getStyle("paddingRight");
				if (textDisplay.getStyle("paddingRight") != padding) {
					textDisplay.setStyle("paddingRight", padding);
				}
				
				padding = getStyle("paddingBottom");
				if (textDisplay.getStyle("paddingBottom") != padding) {
					textDisplay.setStyle("paddingBottom", padding);
				}
			}
			
			override public function styleChanged(styleProp:String):void {
				super.styleChanged(styleProp);
				
				if (!styleProp || styleProp.indexOf("padding") == 0) {
					paddingChanged = true;
					invalidateProperties();
				}
			}
		]]>
	</fx:Script>
	
	<fx:Script>
		<![CDATA[
			override public function get focusSkinExclusions():Array {
				return [ textDisplay ]
			};
		]]>
	</fx:Script>
	
	<!-- border -->
	<s:Rect id="border"
			left="0" right="0" top="0" bottom="0">
		<s:stroke>
			<s:SolidColorStroke id="borderStroke" weight="0" alpha="0"/>
		</s:stroke>
	</s:Rect>
	
	<!-- fill -->
	<!--- Defines the appearance of the TextArea component's background. -->
	<s:Rect id="background"
			left="1" right="1" top="1" bottom="1" radiusX="2" radiusY="2">
		
		<s:fill>
			<!--
			<s:LinearGradient rotation="90">
				<s:GradientEntry color="red" />
				<s:GradientEntry color="purple" />
			</s:LinearGradient>-->
			<s:SolidColor color="0xffffff"/>
		</s:fill>
	</s:Rect>
	
	<!-- shadow -->
	<s:Rect id="shadow"
			left="1" top="1" right="1" height="1">
		<s:fill>
			<s:SolidColor color="0x000000" alpha="0.12" />
		</s:fill>
	</s:Rect>
	
	<!--- Defines the scroller used to scroll the RichEditableText. -->
	<s:Scroller id="scroller"
				left="0" top="0" right="0" bottom="0"
				minViewportInset="1"
				measuredSizeIncludesScrollBars="false">
		<s:RichEditableText id="textDisplay"
							widthInChars="15" heightInLines="10" />
	</s:Scroller>
	
</s:SparkSkin>